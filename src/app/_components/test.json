{
  "name": "code-block",
  "type": "registry:ui",
  "dependencies": ["@tabler/icons-react", "react-syntax-highlighter"],
  "devDependencies": ["@types/react-syntax-highlighter"],
  "files": [
    {
      "path": "ui/code-block.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { atomDark } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\nimport { IconCheck, IconCopy } from \"@tabler/icons-react\";\n\ntype CodeBlockProps = {\n  language: string;\n  filename: string;\n  highlightLines?: number[];\n} & (\n  | {\n      code: string;\n      tabs?: never;\n    }\n  | {\n      code?: never;\n      tabs: Array\u003C{\n        name: string;\n        code: string;\n        language?: string;\n        highlightLines?: number[];\n      }\u003E;\n    }\n);\n\nexport const CodeBlock = ({\n  language,\n  filename,\n  code,\n  highlightLines = [],\n  tabs = [],\n}: CodeBlockProps) =\u003E {\n  const [copied, setCopied] = React.useState(false);\n  const [activeTab, setActiveTab] = React.useState(0);\n\n  const tabsExist = tabs.length \u003E 0;\n\n  const copyToClipboard = async () =\u003E {\n    const textToCopy = tabsExist ? tabs[activeTab].code : code;\n    if (textToCopy) {\n      await navigator.clipboard.writeText(textToCopy);\n      setCopied(true);\n      setTimeout(() =\u003E setCopied(false), 2000);\n    }\n  };\n\n  const activeCode = tabsExist ? tabs[activeTab].code : code;\n  const activeLanguage = tabsExist\n    ? tabs[activeTab].language || language\n    : language;\n  const activeHighlightLines = tabsExist\n    ? tabs[activeTab].highlightLines || []\n    : highlightLines;\n\n  return (\n    \u003Cdiv className=\"relative w-full rounded-lg bg-slate-900 p-4 font-mono text-sm\"\u003E\n      \u003Cdiv className=\"flex flex-col gap-2\"\u003E\n        {tabsExist && (\n          \u003Cdiv className=\"flex  overflow-x-auto\"\u003E\n            {tabs.map((tab, index) =\u003E (\n              \u003Cbutton\n                key={index}\n                onClick={() =\u003E setActiveTab(index)}\n                className={`px-3 !py-2 text-xs transition-colors font-sans ${\n                  activeTab === index\n                    ? \"text-white\"\n                    : \"text-zinc-400 hover:text-zinc-200\"\n                }`}\n              \u003E\n                {tab.name}\n              \u003C/button\u003E\n            ))}\n          \u003C/div\u003E\n        )}\n        {!tabsExist && filename && (\n          \u003Cdiv className=\"flex justify-between items-center py-2\"\u003E\n            \u003Cdiv className=\"text-xs text-zinc-400\"\u003E{filename}\u003C/div\u003E\n            \u003Cbutton\n              onClick={copyToClipboard}\n              className=\"flex items-center gap-1 text-xs text-zinc-400 hover:text-zinc-200 transition-colors font-sans\"\n            \u003E\n              {copied ? \u003CIconCheck size={14} /\u003E : \u003CIconCopy size={14} /\u003E}\n            \u003C/button\u003E\n          \u003C/div\u003E\n        )}\n      \u003C/div\u003E\n      \u003CSyntaxHighlighter\n        language={activeLanguage}\n        style={atomDark}\n        customStyle={{\n          margin: 0,\n          padding: 0,\n          background: \"transparent\",\n          fontSize: \"0.875rem\", // text-sm equivalent\n        }}\n        wrapLines={true}\n        showLineNumbers={true}\n        lineProps={(lineNumber) =\u003E ({\n          style: {\n            backgroundColor: activeHighlightLines.includes(lineNumber)\n              ? \"rgba(255,255,255,0.1)\"\n              : \"transparent\",\n            display: \"block\",\n            width: \"100%\",\n          },\n        })}\n        PreTag=\"div\"\n      \u003E\n        {String(activeCode)}\n      \u003C/SyntaxHighlighter\u003E\n    \u003C/div\u003E\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
