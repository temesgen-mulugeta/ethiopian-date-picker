{
  "name": "ethiopian-date-picker",
  "type": "registry:ui",
  "dependencies": [
    "react-day-picker@9.5.0",
    "@radix-ui/react-popover",
    "date-fns",
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "lib/EthiopianDateUtils.tsx",
      "type": "registry:ui",
      "target": "lib",
      "content": "export interface EthiopianDate {\n  Day: number;\n  Month: number;\n  Year: number;\n}\n\nexport const ethMonths = [\n  \"መስከረም\",\n  \"ጥቅምት\",\n  \"ህዳር\",\n  \"ታህሳስ\",\n  \"ጥር\",\n  \"የካቲት\",\n  \"መጋቢት\",\n  \"ሚያዚያ\",\n  \"ግንቦት\",\n  \"ሰኔ\",\n  \"ሐምሌ\",\n  \"ነሀሴ\",\n  \"ጳጉሜ\",\n];\n\nexport const shortDays = [\"እ\", \"ሰ\", \"ማ\", \"ረ\", \"ሐ\", \"ዓ\", \"ቅ\"];\n\nexport function isLeapYearEt(y: number): boolean {\n  return y % 4 === 3;\n}\n\nexport function ethiopianMonthLength(m: number, y: number): number {\n  if (m === 13) {\n    return isLeapYearEt(y) ? 6 : 5;\n  }\n  return 30;\n}\n\nfunction isLeapYearGr(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction getDayNoEthiopian(etDate: EthiopianDate): number {\n  const num = Math.floor(etDate.Year / 4);\n  const num2 = etDate.Year % 4;\n  return num * 1461 + num2 * 365 + (etDate.Month - 1) * 30 + etDate.Day - 1;\n}\n\nfunction grigorianMonthLength(index: number, year: number): number {\n  switch (index) {\n    case 1: // January\n    case 3: // March\n    case 5: // May\n    case 7: // July\n    case 8: // August\n    case 10: // October\n    case 12: // December\n      return 31;\n\n    case 2: // February\n      return isLeapYearGr(year) ? 29 : 28;\n  }\n  return 30; // April, June, September, November\n}\n\nexport function getEtDayName(day: Date): string {\n  const dayOfWeek = day.getDay();\n  return shortDays[dayOfWeek];\n}\n\nfunction grigorianDateFromDayNo(dayNum: number): Date {\n  let year = 1,\n    month = 1,\n    day;\n\n  const num400 = Math.floor(dayNum / 146097); // number of full 400-year periods\n  dayNum %= 146097;\n  if (dayNum === 0) {\n    return new Date(400 * num400, 12 - 1, 31);\n  }\n\n  const num100 = Math.min(Math.floor(dayNum / 36524), 3); // number of full 100-year periods, but not more than 3\n  dayNum -= num100 * 36524;\n  if (dayNum === 0) {\n    return new Date(400 * num400 + 100 * num100, 12 - 1, 31);\n  }\n\n  const num4 = Math.floor(dayNum / 1461); // number of full 4-year periods\n  dayNum %= 1461;\n  if (dayNum === 0) {\n    return new Date(400 * num400 + 100 * num100 + 4 * num4, 12 - 1, 31);\n  }\n\n  const num1 = Math.min(Math.floor(dayNum / 365), 3); // number of full years, but not more than 3\n  dayNum -= num1 * 365;\n  if (dayNum === 0) {\n    return new Date(400 * num400 + 100 * num100 + 4 * num4 + num1, 12 - 1, 31);\n  }\n\n  year += 400 * num400 + 100 * num100 + 4 * num4 + num1;\n\n  while (true) {\n    const daysInMonth = grigorianMonthLength(month, year);\n\n    if (dayNum <= daysInMonth) {\n      day = dayNum;\n      break;\n    }\n\n    dayNum -= daysInMonth;\n    month++;\n  }\n\n  // Remember in JavaScript Date object, months are 0-based.\n  return new Date(year, month - 1, day);\n}\n\nfunction createEthiopianDate(dn: number): EthiopianDate {\n  const num = Math.floor(dn / 1461);\n  const num2 = dn % 1461;\n  const num3 = Math.floor(num2 / 365);\n  const num4 = num2 % 365;\n  if (num2 !== 1460) {\n    return {\n      Year: num * 4 + num3,\n      Month: Math.floor(num4 / 30) + 1,\n      Day: (num4 % 30) + 1,\n    };\n  } else {\n    return {\n      Year: num * 4 + num3 - 1,\n      Month: 13,\n      Day: 6,\n    };\n  }\n}\n\nfunction addGregorianMonths(m: number, y: number): number {\n  let sum = 0;\n  for (let i = 1; i < m; i++) {\n    sum += grigorianMonthLength(i, y);\n  }\n  return sum;\n}\n\nfunction getDayNoGrigorian(date: Date): number {\n  if (!(date instanceof Date)) {\n    console.error(\"Invalid date object:\", date);\n    return 0;\n  }\n\n  const years = date.getFullYear() - 1;\n  const leap_years =\n    Math.floor(years / 4) - Math.floor(years / 100) + Math.floor(years / 400);\n  const non_leap_years = years - leap_years;\n  const days_in_previous_years = leap_years * 366 + non_leap_years * 365;\n  const days_in_current_year =\n    addGregorianMonths(date.getMonth() + 1, date.getFullYear()) +\n    date.getDate();\n  return days_in_previous_years + days_in_current_year;\n}\n\nexport function toEth(dt: Date): EthiopianDate {\n  return createEthiopianDate(getDayNoGrigorian(dt) - 2431);\n}\n\nexport function toGreg(et: EthiopianDate): Date {\n  return grigorianDateFromDayNo(getDayNoEthiopian(et) + 2431);\n}\n\nexport function getEtMonthName(m: number): string {\n  if (m > 0 && m <= 13) {\n    return ethMonths[m - 1];\n  }\n  return \"\";\n}\n\nexport function ethiopianDayDiff(date1: EthiopianDate, date2: EthiopianDate): number {\n  const day1 = getDayNoEthiopian(date1);\n  const day2 = getDayNoEthiopian(date2);\n  return day1 - day2;\n}\n\nfunction isValid(date: EthiopianDate): boolean {\n  if (date.Year < 1000 || date.Year > 3000) return false;\n  if (date.Month < 1) return false;\n  if (date.Day < 1) return false;\n  if (date.Month > 13) return false;\n  if (date.Day > ethiopianMonthLength(date.Month, date.Year)) return false;\n  return true;\n}\n\nexport function addYears(etDate: EthiopianDate, years: number): EthiopianDate {\n  if (!isValid(etDate))\n    throw new Error(\n      `Invalid ethiopian date ${etDate.Day}-${etDate.Month}-${etDate.Year}`\n    );\n\n  const newYear = etDate.Year + years;\n\n  if (etDate.Month === 13 && etDate.Day === 6) {\n    if (!isLeapYearEt(newYear)) {\n      return { Day: 5, Month: etDate.Month, Year: newYear };\n    }\n  }\n\n  return { Day: etDate.Day, Month: etDate.Month, Year: newYear };\n}\n\nexport function formatEthiopianDate(\n  dateObj: Date | undefined,\n  formatStr: string\n): string {\n  const etDate = dateObj ? toEth(dateObj) : undefined;\n\n  if (!etDate) return \"\";\n\n  switch (formatStr) {\n    case \"LLLL yyyy\":\n    case \"LLLL y\":\n      return `${getEtMonthName(etDate.Month)} ${etDate.Year}`;\n\n    case \"LLLL\":\n      return getEtMonthName(etDate.Month);\n\n    case \"yyyy-MM-dd\":\n      return `${etDate.Year}-${etDate.Month.toString().padStart(\n        2,\n        \"0\"\n      )}-${etDate.Day.toString().padStart(2, \"0\")}`;\n\n    case \"yyyy-MM\":\n      return `${etDate.Year}-${etDate.Month.toString().padStart(2, \"0\")}`;\n\n    case \"d\":\n      return etDate.Day.toString();\n    case \"PPP\":\n      return ` ${getEtMonthName(etDate.Month)} ${etDate.Day}, ${etDate.Year}`;\n    case \"PPPP\":\n      if (!dateObj) return \"\";\n      return `${getEtDayName(dateObj)}, ${getEtMonthName(etDate.Month)} ${etDate.Day}, ${etDate.Year}`;\n\n    case \"cccc\":\n    case \"cccccc\":\n      return dateObj ? getEtDayName(dateObj) : \"\";\n\n    default:\n      return `${etDate.Day}/${etDate.Month}/${etDate.Year}`;\n  }\n}\n\nexport function getStartOfEthiopianWeek(date: Date): Date {\n  const dayOfWeek = date.getDay();\n  // In Ethiopian calendar, Monday is 1 and Sunday is 0\n  // Convert JavaScript's Sunday=0 to Ethiopian's Sunday=0\n  const ethiopianDayOfWeek = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n\n  // Create a new date by subtracting the days to get to Monday\n  const startDate = new Date(date);\n  startDate.setDate(date.getDate() - ethiopianDayOfWeek);\n  startDate.setHours(0, 0, 0, 0);\n  return startDate;\n}"
    },
    {
      "path": "lib/EthiopianDateLib.tsx",
      "type": "registry:ui",
      "target": "lib",
      "content": "import { DateArg, format, FormatOptions } from \"date-fns\";\nimport { enUS } from \"date-fns/locale\";\nimport { DateLib, type DateLibOptions } from \"react-day-picker\";\n\nimport {\n  addYears as addEtYears,\n  ethiopianMonthLength,\n  formatEthiopianDate,\n  isLeapYearEt,\n  toEth,\n  toGreg,\n} from \"./EthiopianDateUtils\";\n\nexport class EthiopianDateLib extends DateLib {\n  constructor(options?: DateLibOptions) {\n    super({ ...options, weekStartsOn: 1 });\n  }\n\n  private ensureDate(date: string | number | Date): Date {\n    return date instanceof Date ? date : new Date(date);\n  }\n\n  override format = (\n    date: string | number | Date,\n    formatStr: string,\n    options?: FormatOptions\n  ): string => {\n    const dateObj = this.ensureDate(date);\n\n    // Handle time formats using original date-fns format\n    if (formatStr.includes(\"hh:mm\") || formatStr.includes(\"a\")) {\n      return format(dateObj, formatStr, { ...this.options, ...options });\n    }\n\n    return formatEthiopianDate(dateObj, formatStr);\n  };\n\n  // Override getMonth to return Ethiopian month (1-13)\n  getMonth = (date: string | number | Date): number => {\n    const dateObj = this.ensureDate(date);\n    const etDate = toEth(dateObj);\n    return etDate.Month - 1; // Convert to 0-based for compatibility\n  };\n\n  // Override getYear to return Ethiopian year\n  getYear = (date: string | number | Date): number => {\n    const dateObj = this.ensureDate(date);\n    const etDate = toEth(dateObj);\n    return etDate.Year;\n  };\n\n  // Override getWeek to return Ethiopian week number\n  getWeek = (date: string | number | Date): number => {\n    const dateObj = this.ensureDate(date);\n    const etDate = toEth(dateObj);\n\n    // Get the first day of the current year\n    const firstDayOfYear = toGreg({\n      Year: etDate.Year,\n      Month: 1,\n      Day: 1,\n    });\n\n    // Get the first day of next year\n    const firstDayOfNextYear = toGreg({\n      Year: etDate.Year + 1,\n      Month: 1,\n      Day: 1,\n    });\n\n    // Adjust to the start of the week (Monday)\n    const getWeekStart = (date: Date) => {\n      const daysSinceMonday = (date.getDay() + 6) % 7;\n      const weekStart = new Date(date);\n      weekStart.setDate(date.getDate() - daysSinceMonday);\n      return weekStart;\n    };\n\n    const firstWeekStart = getWeekStart(firstDayOfYear);\n    const nextYearFirstWeekStart = getWeekStart(firstDayOfNextYear);\n\n    // If the date is in the last week of the year, check if it belongs to week 1 of next year\n    if (dateObj >= nextYearFirstWeekStart) {\n      return 1;\n    }\n\n    // Calculate days since the first week start\n    const daysSinceStart = Math.floor(\n      (dateObj.getTime() - firstWeekStart.getTime()) / (24 * 60 * 60 * 1000)\n    );\n\n    // If the date is before the first week of its year, it belongs to the last week of previous year\n    if (dateObj < firstWeekStart) {\n      const prevYearFirstDay = toGreg({\n        Year: etDate.Year - 1,\n        Month: 1,\n        Day: 1,\n      });\n      const prevYearFirstWeekStart = getWeekStart(prevYearFirstDay);\n      const daysSincePrevStart = Math.floor(\n        (dateObj.getTime() - prevYearFirstWeekStart.getTime()) /\n          (24 * 60 * 60 * 1000)\n      );\n      return Math.floor(daysSincePrevStart / 7) + 1;\n    }\n\n    const data = Math.floor(daysSinceStart / 7) + 1;\n    return data;\n  };\n\n  // Override addMonths to handle Ethiopian calendar\n  addMonths = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>,\n    amount: number\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date);\n    let etDate = toEth(dateObj);\n    let newMonth = etDate.Month + amount;\n    const yearAdjustment = Math.floor((newMonth - 1) / 13);\n    newMonth = ((newMonth - 1) % 13) + 1;\n\n    if (newMonth < 1) {\n      newMonth += 13;\n    }\n    etDate = {\n      ...etDate,\n      Month: newMonth,\n      Year: etDate.Year + yearAdjustment,\n    };\n\n    // Adjust day if it exceeds the month length\n    const monthLength = ethiopianMonthLength(newMonth, etDate.Year);\n    if (etDate.Day > monthLength) {\n      etDate.Day = monthLength;\n    }\n\n    const data = toGreg(etDate) as ResultDate;\n    return data;\n  };\n\n  // ... existing code ...\n  differenceInCalendarMonths = (\n    dateLeft: string | number | Date,\n    dateRight: string | number | Date\n  ): number => {\n    const date1 = this.ensureDate(dateLeft);\n    const date2 = this.ensureDate(dateRight);\n    const etDate1 = toEth(date1);\n    const etDate2 = toEth(date2);\n    const data =\n      (etDate1.Year - etDate2.Year) * 13 + (etDate1.Month - etDate2.Month);\n    return data;\n  };\n\n  // Override addYears to handle Ethiopian calendar\n  addYears = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>,\n    amount: number\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as string | number | Date);\n    const etDate = toEth(dateObj);\n    const newDate = addEtYears(etDate, amount);\n    return toGreg(newDate) as ResultDate;\n  };\n\n  // Override startOfMonth to handle Ethiopian calendar\n  startOfMonth = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as string | number | Date);\n    const etDate = toEth(dateObj);\n\n    const start = toGreg({\n      ...etDate,\n      Day: 1,\n    }) as ResultDate;\n    return start;\n  };\n\n  // Override endOfMonth to handle Ethiopian calendar\n  endOfMonth = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as string | number | Date);\n    const etDate = toEth(dateObj);\n\n    const end = toGreg({\n      ...etDate,\n      Day: ethiopianMonthLength(etDate.Month, etDate.Year),\n    }) as ResultDate;\n    return end;\n  };\n\n  // Override isSameMonth to handle Ethiopian calendar\n  isSameMonth = (\n    laterDate: string | number | Date,\n    earlierDate: string | number | Date\n  ): boolean => {\n    const date1 = this.ensureDate(laterDate);\n    const date2 = this.ensureDate(earlierDate);\n    const etDate1 = toEth(date1);\n    const etDate2 = toEth(date2);\n    return etDate1.Year === etDate2.Year && etDate1.Month === etDate2.Month;\n  };\n\n  // Override isSameYear to handle Ethiopian calendar\n  isSameYear = (\n    laterDate: string | number | Date,\n    earlierDate: string | number | Date\n  ): boolean => {\n    const date1 = this.ensureDate(laterDate);\n    const date2 = this.ensureDate(earlierDate);\n    const etDate1 = toEth(date1);\n    const etDate2 = toEth(date2);\n    return etDate1.Year === etDate2.Year;\n  };\n  // Override endOfYear to handle Ethiopian calendar\n  endOfYear = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as Date);\n    const etDate = toEth(dateObj);\n    return toGreg({\n      Year: etDate.Year,\n      Month: 13,\n      Day: isLeapYearEt(etDate.Year) ? 6 : 5,\n    }) as ResultDate;\n  };\n\n  // Override setMonth to handle Ethiopian calendar\n  setMonth = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>,\n    month: number\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as Date);\n    const etDate = toEth(dateObj);\n    // Adjust month to 1-based index since Ethiopian calendar uses 1-13\n    const targetMonth = month + 1;\n\n    if (targetMonth < 1 || targetMonth > 13) {\n      throw new Error(\n        \"Month must be between 0 and 12 (1-13 in Ethiopian calendar)\"\n      );\n    }\n\n    // Adjust day if it exceeds the month length\n    const monthLength = ethiopianMonthLength(targetMonth, etDate.Year);\n    const newDay = Math.min(etDate.Day, monthLength);\n\n    return toGreg({\n      ...etDate,\n      Month: targetMonth,\n      Day: newDay,\n    }) as ResultDate;\n  };\n\n  // Override startOfYear to handle Ethiopian calendar\n  startOfYear = <DateType extends Date, ResultDate extends Date = DateType>(\n    date: DateArg<DateType>\n  ): ResultDate => {\n    const dateObj = this.ensureDate(date as Date);\n    const etDate = toEth(dateObj);\n    return toGreg({\n      Year: etDate.Year,\n      Month: 1,\n      Day: 1,\n    }) as ResultDate;\n  };\n}\n\n// Create a default instance\nexport const ethiopianDateLib = new EthiopianDateLib({\n  locale: {\n    ...enUS,\n    formatLong: {\n      date: () => \"MM/dd/yyyy\",\n      time: () => \"HH:mm:ss\",\n      dateTime: () => \"MM/dd/yyyy HH:mm:ss\",\n    },\n  },\n});"
    },
    {
      "path": "components/ui/calendar.tsx",
      "type": "registry:ui",
      "target": "components/ui",
      "content": ""
    },
    {
      "path": "components/date-picker.tsx",
      "type": "registry:ui",
      "target": "components",
      "content": ""
    }
  ]
}
